<?php

namespace app\framework\db;

use yii\db\Connection;
use app\framework\utils\StringHelper;
use app\framework\utils\DateTimeHelper;

class SqlHelper
{

    /**
     * 新增数据
     * @param string $tableName 表名
     * @param Connection $conn
     * @param array $dataRow the column data (name => value) to be inserted into the table.
     * @param bool $auto 是否自动填充约定字段的值(created_on, modified_on etc.)
     * @return integer number of rows affected by the execution.
     */
    public static function insert($tableName, $conn, $dataRow, $auto = true)
    {
        if (empty($dataRow)) {
            throw new \InvalidArgumentException('$dataRow');
        }

        if ($auto) {
            if (!array_key_exists('created_on', $dataRow)) {
                $dataRow['created_on'] = DateTimeHelper::now();
                $dataRow['modified_on'] = $dataRow['created_on'];
            }

            if (!array_key_exists('created_by', $dataRow)) {
                $sessionAccessor = \Yii::$container->get('app\framework\auth\interfaces\UserSessionAccessorInterface');
                $session = $sessionAccessor->getUserSession();
                $dataRow['created_by'] = $session->user_id;
                $dataRow['modified_by'] = $dataRow['created_by'];
            }
        }

        if (!array_key_exists('id', $dataRow)) {
            $dataRow['id'] = StringHelper::uuid();
        }

        return $conn->createCommand()->insert($tableName, $dataRow)->execute();
    }

    /**
     * 批量添加
     * @param string $tableName 表名
     * @param Connection $conn
     * @param array $columns 列名
     * @param array $dataRows 数据行
     * @param bool $autoGeneratedId 是否自动生成ID，默认为true
     * @return integer number of rows affected by the execution.
     */
    public static function batchInsert($tableName, $conn, $columns, $dataRows, $autoGeneratedId = true)
    {
        if (empty($columns)) {
            throw new \InvalidArgumentException('$columns');
        }

        if (empty($dataRows)) {
            throw new \InvalidArgumentException('$dataRows');
        }

        $withId = in_array('id', $columns);
        $withCreatedBy = in_array('created_by', $columns);
        $withCreatedOn = in_array('created_on', $columns);
        $now = DateTimeHelper::now();

        if ($autoGeneratedId && !$withId) {
            $columns[] = 'id';
        }

        if (!$withCreatedOn) {
            $columns[] = 'created_on';
            $columns[] = 'modified_on';
        }

        if (!$withCreatedBy) {
            $columns[] = 'created_by';
            $columns[] = 'modified_by';
        }

        foreach ($dataRows as &$row) {

            if ($autoGeneratedId && !$withId) {
                $row[] = StringHelper::uuid();
            }

            if (!$withCreatedOn) {
                $row[] = $now;
                $row[] = $now;
            }

            if (!$withCreatedBy) {
                $sessionAccessor = \Yii::$container->get('app\framework\auth\interfaces\UserSessionAccessorInterface');
                $session = $sessionAccessor->getUserSession();
                $userId = $session->user_id;
                $row[] = $userId;
                $row[] = $userId;
            }

        }

        return $conn->createCommand()->batchInsert($tableName, $columns, $dataRows)->execute();
    }

    /**
     * @param string $tableName 表名
     * @param Connection $conn
     * @param array $columns the column data (name => value) to be inserted into the table.
     * @param array|string $condition
     * @param array $params the parameters to be bound to the command
     * @return integer number of rows affected by the execution.
     */
    public static function update($tableName, $conn, $columns, $condition = '', $params = [])
    {
        if (empty($columns)) {
            throw new \InvalidArgumentException('$columns');
        }

        if (!array_key_exists('modified_on', $columns)) {
            $columns['modified_on'] = DateTimeHelper::now();
        }

        if (!array_key_exists('modified_by', $columns)) {
            $sessionAccessor = \Yii::$container->get('app\framework\auth\interfaces\UserSessionAccessorInterface');
            $session = $sessionAccessor->getUserSession();
            $columns['modified_by'] = $session->user_id;
        }

        return $conn->createCommand()->update($tableName, $columns, $condition, $params)->execute();
    }

    /**
     * 逻辑删除
     * @param $tableName
     * @param Connection $conn
     * @param string|array $condition
     * @param array $params
     * @return integer number of rows affected by the execution.
     */
    public static function logicDelete($tableName, $conn, $condition, $params = [])
    {
        if (empty($condition)) {
            throw new \InvalidArgumentException('请带删除条件$condition ! ');
        }

        return $conn->createCommand()->update($tableName, ['is_deleted' => 1], $condition, $params)->execute();
    }


    /**
     * 物理删除
     * @param string $tableName
     * @param Connection $conn
     * @param string $condition
     * @param array $params
     * @return mixed
     */
    public static function realDelete($tableName, $conn, $condition, $params = [])
    {
        if (empty($condition)) {
            throw new \InvalidArgumentException('请带删除条件$condition ! ');
        }

        return $conn->createCommand()->delete($tableName, $condition, $params)->execute();
    }

    /**
     * sql 注入检查特殊字符
     * @param string $str
     */
    public static function inject_check($str){
        $tmp = preg_match('/select|insert|update|delete|\'|\/\*|\*|\.\.\/|\.\/|union|into|load_file|outfile/', $str); // 进行过滤
        if($tmp){
            return false;
        }else{
            return $str;
        }
    }
}